	var margin = {top: 50, right: 30, bottom: 30, left: 30},
    width = 300- margin.left - margin.right,
    height = 250 - margin.top - margin.bottom;

var container2 = d3.select("#new2").append("svg")
    .attr("width",520)
    .attr("height",400)
    .append("g")
	.attr('transform',"translate("+ 0 +","+ 0 +")");

var svg = container2
    .attr("width", w + margin.left + margin.right)
       .attr("height", h + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    // define the x axis and its class, append it to svg 
    var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom")
       svg.append("svg:g")
        .attr("class", "x axis");

    // define the y axis and its class, append it to svg
    var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left")
        svg.append("svg:g")
        .attr("class", "y axis");

        svg.append("g")
      .attr("class", "y axis")
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Median Price per Sq. Ft.");


        //svg.append("g")
      //.attr("class", "x axis")
    //.append("text")
      //.attr("x",200)
      //.attr("y",380)
      //.attr("dx", ".71em")
      //.style("text-anchor", "end")
      //.text("date");
    var qq = 0;


      
      
                
// put data from csv into countries variable
//run redraw function that will refresh whenever a new data series is selected 
d3.tsv("dat/psqrft.csv", function(csv) {
        dat = csv;
        redraw();
    });


// set terms of transition that will take place
// when a new economic indicator is chosen   

function redraw() {
   console.log('sampleData ', dat);
    // create data nests based on economic indicator (series)
    
    
    // get value from menu selection
    // the option values are set in HTML and correspond
    //to the [indicatorCode] value we used to nest the data  
    
    // only retrieve data from the selected series, using the nest we just created
    
    // for object constancy we will need to set "keys", one for each country.
    // the keyring variable contains only the names of the countries

    var keyring = d3.keys(data[0]).filter(function(key) { 
            return (key !== "date");
        });
    console.log(data[0])
 //     console.log('keyring', keyring);
    // get the year and related statistics, map them to each country separately 
    var transpose = keyring.map(function(name) {
            return {
              name: name,
              values: data.map(function(d) {
                return {year: parseDate(d.date), stat: +d[name]};
              })
            };
        });

   // console.log('transpose', transpose);

    // set the x and y domains as the max and min
    // of the related year and statistics, respectively
    x.domain([
    d3.min(transpose, function(c) { return d3.min(c.values, function(v) { return v.year; }); }),
    d3.max(transpose, function(c) { return d3.max(c.values, function(v) { return v.year; }); })
  ]);

    y.domain([
    d3.min(transpose, function(c) { return d3.min(c.values, function(v) { return v.stat; }); }),
    d3.max(transpose, function(c) { return d3.max(c.values, function(v) { return v.stat; }); })
  ]);

    // announce to d3 that we will be using something called
    // "country" that makes use of the transposed data 
    var country = svg.selectAll(".country")
      .data(transpose);
     

    // create separate groups for each country
    // assign them a class and individual IDs (for styling) 
    var countryEnter = country.enter().append("g")
      .attr("class", "country")
      .attr("id", function(d) { return d.name; });

//    console.log('sampleData ', sampleData);

    // draw the lines and color them according to their names
    countryEnter.append("path")
      .attr("class", "line")
      .attr("d", function(d) { return line(d.values); })
	.style("stroke", function(d) { return color(d.name); })
	.style("stroke-width",4)
      .style("opacity",function(d) {
        //console.log('opac: ', sampleData[d.name].opacity);
        return 1 });


    transpose.forEach(function(d) {
            document.getElementById(d.name).style.cssText = "opacity:0";

    })




    // create lables for each country
    // set their position to that of the last year and stat
    countryEnter.append("text")
     .attr("class", "names")
     .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
     .attr("transform", function(d) { return "translate(" + x(d.value.year) + "," + y(d.value.stat) + ")"; })
     .attr("x", 4)
     .attr("dy", ".35em")
     .text(function(d) { return d.name; })
     .style("font-size","10px")
;

    // set variable for updating visualization
    var countryUpdate = d3.transition(country);
    
    // change values of path to those of the new series
    countryUpdate.select("path")
      .attr("d", function(d) { return line(d.values); });
    
    // change position of text alongside the moving path  
    countryUpdate.select("text")
       .attr("transform", function(d) { return "translate(" + x(d.values[d.values.length - 1].year) + "," + y(d.values[d.values.length - 1].stat) + ")"; });
  
  // update the axes, though only the y axis will change    
      d3.transition(svg).select(".y.axis")
          .call(yAxis);   
          
      d3.transition(svg).select(".x.axis")
            .attr("transform", "translate(0," + h + ")")
          .call(xAxis);
// that concludes redraw()
}

