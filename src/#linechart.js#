var margin = {top: 20, right: 30, bottom: 40, left: 45},
        w = 350 - margin.left - margin.right,
        h =200 - margin.top - margin.bottom,
        x = d3.time.scale().range([0, w]),
    y = d3.scale.linear().range([ h,0]);
        parseDate = d3.time.format("%Y%m").parse;

    var color = d3.scale.category10(); // to generate a different color for each line
    
    // to be used later
    var countries,
        filtered,
        transpose;
    
    // where the line gets its properties, how it will be interpolated
var line = d3.svg.line()
    .interpolate("basis")
    .defined(function(d) { return !isNaN(d.stat); })
	.x(function(d) { return x(d.year); })
	.y(function(d) { return y(d.stat); });
    //    .defined(function(d) {return !isNaN(d.stat);} );
    
/*
var container2= d3.select("#new2").append("svg")
    .attr("width",w)
    .attr("height",h)
    .append("g")
    .attr('transform',"translate("+ 0 +","+ 0+")");
  //  .attr('transform', 'scale(1)');
*/

var svg =  d3.select("#new2").append("svg")
    .attr("width", w + margin.left + margin.right)
       .attr("height", h + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    // define the x axis and its class, append it to svg 
    var xAxis = d3.svg.axis()
        .scale(x)
	.ticks(6)
.innerTickSize(-h)
    .outerTickSize(0)
    .tickPadding(6)
        .orient("bottom")
       svg.append("svg:g")
        .attr("class", "x axis");

    // define the y axis and its class, append it to svg
    var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left")
	.ticks(8)
 .innerTickSize(-w)
    .outerTickSize(0)
    .tickPadding(8);
        svg.append("svg:g")
        .attr("class", "y axis");

        svg.append("g")
      .attr("class", "y axis")
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Median Price per Sq. Ft.");


        //svg.append("g")
      //.attr("class", "x axis")
    //.append("text")
      //.attr("x",200)
      //.attr("y",380)
      //.attr("dx", ".71em")
      //.style("text-anchor", "end")
      //.text("date")


      
      
                
// put data from csv into countries variable
//run redraw function that will refresh whenever a new data series is selected 
d3.csv("dat/psqrft.csv", function(csv) {
    data = csv;
        redraw();
    });


// set terms of transition that will take place
// when a new economic indicator is chosen   

function redraw() {
  // console.log('sampleData ', data);
    // create data nests based on economic indicator (series)
    
    
    // get value from menu selection
    // the option values are set in HTML and correspond
    //to the [indicatorCode] value we used to nest the data  
    
    // only retrieve data from the selected series, using the nest we just created
    
    // for object constancy we will need to set "keys", one for each country.
    // the keyring variable contains only the names of the countries
   var keyring = d3.keys(data[0]).filter(function(key) { 
            return (key !== "zip");
        });

//      console.log('keyring', keyring.length);
    // get the year and related statistics, map them to each country separately 
    var transpose = data.map(function(d) {
	var Vs = [];
	for(var i = 0; i<keyring.length;i++){
	    Vs.push({year: parseDate(keyring[i]), stat: d[keyring[i]]});
	}
//	console.log("Vs",Vs);
	return {
              name: d.zip,
            values: Vs
	}
    });
    	transpose = transpose.filter(function(d){
	return d.name == '98105'});
//transpose = transpose.filter
    console.log('transpose', transpose);
//    console.log(!isNaN(transpose[0]["values"][230]["stat"]));
    // set the x and y domains as the max and min
    // of the related year and statistics, respectively
    x.domain([
    d3.min(transpose, function(c) { return d3.min(c.values, function(v) { return v.year; }); }),
    d3.max(transpose, function(c) { return d3.max(c.values, function(v) { return v.year; }); })
  ]);

    y.domain([
    d3.min(transpose, function(c) { return d3.min(c.values, function(v) { return v.stat; }); }),
    d3.max(transpose, function(c) { return d3.max(c.values, function(v) { return v.stat; }); })
  ]);

    // announce to d3 that we will be using something called
    // "country" that makes use of the transposed data 
    var country = svg.selectAll(".zip")
      .data(transpose);
     

    // create separate groups for each country
    // assign them a class and individual IDs (for styling) 
    var countryEnter = country.enter().append("g")
      .attr("class", "zip")
      .attr("id", function(d) { return d.name; });

//    console.log('sampleData ', sampleData);

    // draw the lines and color them according to their names
    countryEnter.append("path")
      .attr("class", "line")
	.attr("d", function(d) {return line(d.values); })
	.style("stroke", function(d) { return color(d.name); })
	.style("stroke-width",4)
      .style("opacity",function(d) {
        //console.log('opac: ', sampleData[d.name].opacity);
        return 1 });



    // create lables for each country
    // set their position to that of the last year and stat
    countryEnter.append("text")
     .attr("class", "names")
     .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
     .attr("transform", function(d) { return "translate(" + x(d.value.year) + "," + y(d.value.stat) + ")"; })
     .attr("x", 4)
     .attr("dy", ".35em")
     .text(function(d) { return d.name; })
     .style("font-size","15px")
;

    // set variable for updating visualization
    var countryUpdate = d3.transition(country);
    
    // change values of path to those of the new series
    countryUpdate.select("path")
      .attr("d", function(d) { return line(d.values); });
    
    // change position of text alongside the moving path  
    countryUpdate.select("text")
	.attr("transform", function(d) { return "translate(" + x(d.values[d.values.length - 10].year) + "," + y(d.values[d.values.length - 1].stat) + ")"; })
        .style("font-size","15px");
    
  // update the axes, though only the y axis will change    
      d3.transition(svg).select(".y.axis")
          .call(yAxis);   
          
      d3.transition(svg).select(".x.axis")
            .attr("transform", "translate(0," + h+ ")")
          .call(xAxis);
// that concludes redraw()
}

